Public Class HeatPump_WaterAir_Heating_CurveFit
	Implements IComponentEngine

	Public Structure WAHPHeatingData

		Dim RatedAirVolFlowRate As Single		'rated air volumetric flow rate [m3/s]
		Dim RatedWaterVolFlowRate As Single		'rated water volumetric flow rate [m3/s]
		Dim RatedTotalCap As Single				'rated total heating capacity [W]
		Dim RatedPower As Single				'rated compressor power [W]

		Dim CatalogDataArray(,) As Single		'Base catalog data array (zero-based)

		Dim LoadSideInletTemp As List(Of Double)		'Inlet Air Dry Bulb Temp [C]   TLI
		Dim LoadSideVolFlowRate As List(Of Double)			'Air Volumetric Flow Rate [m3/s]  VL
		Dim SourceSideVolFlowRate As List(Of Double)		'Water Volumetric Flow Rate [m3/s]   VSI
		Dim TotalHeatingCapacity As List(Of Double)		'Total Heating Capacity [KW]  HC
		Dim SourceSideHeatRate As List(Of Double)			'Source Side Heat Transfer Rate [KW]   HA
		Dim CompressorPower As List(Of Double)				'Compressor Power [KW]   ER
		Dim SourceSideInletTemp As List(Of Double)			'Water Inlet Temperature [C]   TSI
		Dim PredictedTotHtgCapacity As List(Of Double)		'Data generated by parameters once complete (Qload)
		Dim PredictedSourceHtgRate As List(Of Double)		'Data generated by parameters once complete (Qsource)
		Dim PredictedPowerInput As List(Of Double)			'Data generated by parameters once complete (Winput)

		Sub ReInitDataLists()
			LoadSideInletTemp = New List(Of Double)
			LoadSideVolFlowRate = New List(Of Double)
			SourceSideVolFlowRate = New List(Of Double)
			TotalHeatingCapacity = New List(Of Double)
			SourceSideInletTemp = New List(Of Double)
			SourceSideHeatRate = New List(Of Double)
			CompressorPower = New List(Of Double)
			PredictedTotHtgCapacity = New List(Of Double)
			PredictedSourceHtgRate = New List(Of Double)
			PredictedPowerInput = New List(Of Double)
		End Sub

	End Structure
	Public WAHPHeating As New WAHPHeatingData

	Private _GenerateObjectOrParameterList As PublicData.ObjectOrParList
	Public Property GenerateObjectOrParameterList() As PublicData.ObjectOrParList Implements IComponentEngine.GenerateObjectOrParameterList
		Get
			Return _GenerateObjectOrParameterList
		End Get
		Set(ByVal value As PublicData.ObjectOrParList)
			_GenerateObjectOrParameterList = value
		End Set
	End Property

	Public ReadOnly Property EnergyPlusObjectFormat() As String Implements IComponentEngine.EnergyPlusObjectFormat
		Get
			Dim Format As New System.Text.StringBuilder
			Format.AppendLine("Coil:Heating:WaterToAirHeatPump:EquationFit,")
			Format.AppendLine("{0},{1}!- field Name")
			Format.AppendLine("{2},{3}!- field Water Inlet Node Name")
			Format.AppendLine("{4},{5}!- field Water Outlet Node Name")
			Format.AppendLine("{6},{7}!- field Air Inlet Node Name")
			Format.AppendLine("{8},{9}!- field Air Outlet Node Name")
			Format.AppendLine("{10},{11}!- field Rated Air Flow Rate")
			Format.AppendLine("{12},{13}!- field Rated Water Flow Rate")
			Format.AppendLine("{14},{15}!- field Rated Heating Capacity")
			Format.AppendLine("{16},{17}!- field Rated Heating COP")
			Format.AppendLine("{18},{19}!- field Heating Capacity Coefficient 1")
			Format.AppendLine("{20},{21}!- field Heating Capacity Coefficient 2")
			Format.AppendLine("{22},{23}!- field Heating Capacity Coefficient 3")
			Format.AppendLine("{24},{25}!- field Heating Capacity Coefficient 4")
			Format.AppendLine("{26},{27}!- field Heating Capacity Coefficient 5")
			Format.AppendLine("{28},{29}!- field Heating Power Consumption Coefficient 1")
			Format.AppendLine("{30},{31}!- field Heating Power Consumption Coefficient 2")
			Format.AppendLine("{32},{33}!- field Heating Power Consumption Coefficient 3")
			Format.AppendLine("{34},{35}!- field Heating Power Consumption Coefficient 4")
			Format.AppendLine("{36};{37}!- field Heating Power Consumption Coefficient 5")
			Return Format.ToString
		End Get
	End Property

	Public Event ProgressEvent_Complete(ByVal objectentry As String) Implements IComponentEngine.ProgressEvent_Complete
	Public Event ProgressEvent_Increment() Implements IComponentEngine.ProgressEvent_Increment
	Public Event ProgressEvent_Initialize(ByVal maxvalue As Integer) Implements IComponentEngine.ProgressEvent_Initialize
	Public Event PlotEvent(ByVal PlotData As PublicData.PlotData) Implements IComponentEngine.PlotEvent

	Public Function GenerateComponentParameters() As PublicData.ComponentCalculationReturn Implements IComponentEngine.GenerateComponentParameters

		Dim NumDataPoints As Integer = WAHPHeating.CatalogDataArray.GetUpperBound(1) + 1	'Number of Data points
		Dim NumDataPoints_BZ As Integer = NumDataPoints - 1

		Dim NumCoefficients As Integer = 5		'Number of Coefficients in Curve fit
		Dim NumCoefficients_BZ As Integer = NumCoefficients - 1

		RaiseEvent ProgressEvent_Initialize(13)

		Const CelciusToKelvin As Double = 273.15
		Const Tref As Double = 283.15			 'reference temperature = 10C
		Const InstanceCalcCapacity As Integer = 1
		Const InstanceCalcPower As Integer = 2

		WAHPHeating.ReInitDataLists()

		'=============READING INPUT DATA========================
		'Read in the catalog data input
		'*1000=Change kW to W
		For I As Integer = 0 To NumDataPoints_BZ
			WAHPHeating.LoadSideInletTemp.Add(WAHPHeating.CatalogDataArray(0, I))
			WAHPHeating.LoadSideVolFlowRate.Add(WAHPHeating.CatalogDataArray(1, I))
			WAHPHeating.TotalHeatingCapacity.Add(WAHPHeating.CatalogDataArray(2, I) * 1000)
			WAHPHeating.SourceSideHeatRate.Add(WAHPHeating.CatalogDataArray(3, I) * 1000)
			WAHPHeating.SourceSideInletTemp.Add(WAHPHeating.CatalogDataArray(4, I))
			WAHPHeating.SourceSideVolFlowRate.Add(WAHPHeating.CatalogDataArray(5, I))
			WAHPHeating.CompressorPower.Add(WAHPHeating.CatalogDataArray(6, I) * 1000)
		Next I
		RaiseEvent ProgressEvent_Increment()

		Dim C1 As MatrixLibrary.Matrix = Nothing
		Dim C2 As MatrixLibrary.Matrix = Nothing

		For InstanceNum As Integer = InstanceCalcCapacity To InstanceCalcPower

			'Redimension all arrays to the required size determined by number of coefficients and number of data points.
			Dim F As New MatrixLibrary.Matrix(NumDataPoints, NumCoefficients)
			Dim Y As New MatrixLibrary.Matrix(NumDataPoints, 1)
			RaiseEvent ProgressEvent_Increment()

			'Fill in the F matrix
			For I As Integer = 0 To NumDataPoints_BZ
				F(I, 0) = 1
				F(I, 1) = ((WAHPHeating.LoadSideInletTemp(I) + CelciusToKelvin) / Tref)
				F(I, 2) = ((WAHPHeating.SourceSideInletTemp(I) + CelciusToKelvin) / Tref)
				F(I, 3) = (WAHPHeating.LoadSideVolFlowRate(I) / WAHPHeating.RatedAirVolFlowRate)
				F(I, 4) = (WAHPHeating.SourceSideVolFlowRate(I) / WAHPHeating.RatedWaterVolFlowRate)
			Next
			RaiseEvent ProgressEvent_Increment()

			'Fill Y array based on which instance we are on
			For I As Integer = 0 To NumDataPoints_BZ
				Select Case InstanceNum
					Case InstanceCalcCapacity
						Y(I, 0) = WAHPHeating.TotalHeatingCapacity(I) / WAHPHeating.RatedTotalCap
					Case InstanceCalcPower
						Y(I, 0) = WAHPHeating.CompressorPower(I) / WAHPHeating.RatedPower
				End Select
			Next
			RaiseEvent ProgressEvent_Increment()

			'Do the required matrix operations to get Coefficient matrix.
			Try
				Select Case InstanceNum
					Case InstanceCalcCapacity
						C1 = MatrixLibrary.Matrix.SolveEqSet(F, Y)
					Case InstanceCalcPower
						C2 = MatrixLibrary.Matrix.SolveEqSet(F, Y)
				End Select
			Catch ex As Exception
				Return New PublicData.ComponentCalculationReturn(False, "Matrix inverse routine error, could be bad input data")
			End Try
			RaiseEvent ProgressEvent_Increment()

			'Generate Outputs
			For I As Integer = 0 To NumDataPoints_BZ
				Select Case InstanceNum
					Case InstanceCalcCapacity
						WAHPHeating.PredictedTotHtgCapacity.Add(WAHPHeating.RatedTotalCap * _
						(C1(0, 0) * F(I, 0) + _
						 C1(1, 0) * F(I, 1) + _
						 C1(2, 0) * F(I, 2) + _
						 C1(3, 0) * F(I, 3) + _
						 C1(4, 0) * F(I, 4)))
					Case InstanceCalcPower
						WAHPHeating.PredictedPowerInput.Add(WAHPHeating.RatedPower * _
						(C2(0, 0) * F(I, 0) + _
						 C2(1, 0) * F(I, 1) + _
						 C2(2, 0) * F(I, 2) + _
						 C2(3, 0) * F(I, 3) + _
						 C2(4, 0) * F(I, 4)))
						WAHPHeating.PredictedSourceHtgRate.Add(WAHPHeating.PredictedTotHtgCapacity(I) - WAHPHeating.PredictedPowerInput(I))
				End Select
			Next
			RaiseEvent ProgressEvent_Increment()

		Next InstanceNum
		RaiseEvent ProgressEvent_Increment()

		'Output the data
		Dim TextOutput As String = ""
		Select Case Me.GenerateObjectOrParameterList
			Case ObjectOrParList.EnergyPlusObject
				Dim FieldValues As New List(Of String)
				FieldValues.Add("Your Heating Coil Name")
				FieldValues.Add("Your Coil Water Inlet Node")
				FieldValues.Add("Your Coil Water Outlet Node")
				FieldValues.Add("Your Coil Air Inlet Node")
				FieldValues.Add("Your Coil Air Outlet Node")
				FieldValues.Add(WAHPHeating.RatedAirVolFlowRate.ToString)
				FieldValues.Add(WAHPHeating.RatedWaterVolFlowRate.ToString)
				FieldValues.Add(WAHPHeating.RatedTotalCap.ToString)
				FieldValues.Add(Math.Round((WAHPHeating.RatedTotalCap / WAHPHeating.RatedPower), DecPts).ToString) 'Rated COP
				For J As Integer = 0 To NumCoefficients_BZ
					FieldValues.Add(Math.Round(C1(J, 0), DecPts).ToString)
				Next
				For J As Integer = 0 To NumCoefficients_BZ
					FieldValues.Add(Math.Round(C2(J, 0), DecPts).ToString)
				Next
				TextOutput = EPlusObject(FieldValues.ToArray, Me.EnergyPlusObjectFormat())
			Case ObjectOrParList.ParameterList
				Dim TextBuilder As New System.Text.StringBuilder
				TextBuilder.AppendLine("**Begin Nomenclature**")
				TextBuilder.AppendLine("HC: Heating Capacity")
				TextBuilder.AppendLine("HP: Heating Power Consumption")
				TextBuilder.AppendLine("TLI: Entering Air Temperature")
				TextBuilder.AppendLine("TSI: Entering Water Temperature")
				TextBuilder.AppendLine("VLI: Entering Air Flow Rate")
				TextBuilder.AppendLine("VSI: Entering Water Flow Rate")
				TextBuilder.AppendLine("Subscript _R: Rated Value")
				TextBuilder.AppendLine("Subscript _#: Coefficient #")
				TextBuilder.AppendLine("**End Nomenclature**")
				TextBuilder.AppendLine()
				TextBuilder.AppendLine("**Begin Governing Equations**")
				TextBuilder.AppendLine("(HC/HC_R) = HC_1 + HC_2*(TLI/TLI_R) + HC_3*(TSI/TSI_R) + HC_4*(VLI/VLI_R) + HC_5*(VSI/VSI_R)")
				TextBuilder.AppendLine("(HP/HP_R) = HP_1 + HP_2*(TLI/TLI_R) + HP_3*(TSI/TSI_R) + HP_4*(VLI/VLI_R) + HP_5*(VSI/VSI_R)")
				TextBuilder.AppendLine("**End Governing Equations**")
				TextBuilder.AppendLine()
				TextBuilder.AppendLine("**Begin Reporting Parameters**")
				For J As Integer = 0 To NumCoefficients_BZ
					TextBuilder.AppendLine("Heating Capacity Coefficient HC_" & (J + 1).ToString & ": " & Math.Round(C1(J, 0), DecPts).ToString)
				Next
				For J As Integer = 0 To NumCoefficients_BZ
					TextBuilder.AppendLine("Heating Power Consumption Coefficient HP_" & (J + 1).ToString & ": " & Math.Round(C2(J, 0), DecPts).ToString)
				Next
				TextBuilder.AppendLine("Rated Heating Capacity: " & WAHPHeating.RatedTotalCap.ToString & "{kW}")
				TextBuilder.AppendLine("Rated Heating Power Consumption: " & WAHPHeating.RatedPower.ToString & "{kW}")
				TextBuilder.AppendLine("Rated Air Volumetric Flow Rate: " & WAHPHeating.RatedAirVolFlowRate.ToString & "{m3/s}")
				TextBuilder.AppendLine("Rated Water Volumetric Flow Rate: " & WAHPHeating.RatedWaterVolFlowRate.ToString & "{m3/s}")
				TextBuilder.AppendLine("**End Reporting Parameters**")
				TextOutput = TextBuilder.ToString
		End Select
		RaiseEvent ProgressEvent_Increment()
		RaiseEvent ProgressEvent_Complete(TextOutput)

		GenerateComponentParameters.Success = True
		GenerateComponentParameters.ErrorMessage = ""
	End Function

	Public Sub GeneratePlot_Absolute() Implements IComponentEngine.GeneratePlot_Absolute

		Dim PlotSeries As New Collections.Generic.List(Of PublicData.PlotSeriesData)

		PlotSeries.Add(New PublicData.PlotSeriesData("Total HT Model Output", PlotTypeEnum.LinePlot, Color.red, WAHPHeating.PredictedTotHtgCapacity.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Total HT Catalog Data", PlotTypeEnum.PointPlot, Color.Red, WAHPHeating.TotalHeatingCapacity.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT Model Output", PlotTypeEnum.LinePlot, Color.BlueViolet, WAHPHeating.PredictedSourceHtgRate.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT Catalog Data", PlotTypeEnum.PointPlot, Color.BlueViolet, WAHPHeating.SourceSideHeatRate.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Compressor Power Model Output", PlotTypeEnum.LinePlot, Color.Green, WAHPHeating.PredictedPowerInput.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Compressor Power Catalog Data", PlotTypeEnum.PointPlot, Color.Green, WAHPHeating.CompressorPower.ToArray))

		Dim MyPlotData As New PublicData.PlotData("Model vs. Catalog Data Points", "Heat Transfer Rate/Power [W]", PlotSeries)
		RaiseEvent PlotEvent(MyPlotData)

	End Sub

	Public Sub GeneratePlot_PercentError() Implements IComponentEngine.GeneratePlot_PercentError

		Dim UpperBound As Integer = WAHPHeating.PredictedTotHtgCapacity.Count - 1
		Dim PercDiffTotal(UpperBound) As Double
		Dim PercDiffSource(UpperBound) As Double
		Dim PercDiffPower(UpperBound) As Double

		'Dim SSQETotal As Decimal = 0.0
		'Dim SSQESource As Decimal = 0.0
		'Dim SSQEPower As Decimal = 0.0

		For I As Integer = 1 To UpperBound
			PercDiffTotal(I) = 100 * (WAHPHeating.PredictedTotHtgCapacity(I) - WAHPHeating.TotalHeatingCapacity(I)) / WAHPHeating.TotalHeatingCapacity(I)
			PercDiffSource(I) = 100 * (WAHPHeating.PredictedSourceHtgRate(I) - WAHPHeating.SourceSideHeatRate(I)) / WAHPHeating.SourceSideHeatRate(I)
			PercDiffPower(I) = 100 * (WAHPHeating.PredictedPowerInput(I) - WAHPHeating.CompressorPower(I)) / WAHPHeating.CompressorPower(I)
			'SSQETotal += (WAHPHeating.PredictedTotHtgCapacity(I) - (WAHPHeating.CatalogDataArray(2, I) * 1000)) ^ 2
			'SSQESource += (WAHPHeating.PredictedSourceHtgRate(I) - (WAHPHeating.CatalogDataArray(3, I) * 1000)) ^ 2
			'SSQEPower += (WAHPHeating.PredictedPowerInput(I) - (WAHPHeating.CatalogDataArray(6, I) * 1000)) ^ 2
		Next

		'Dim RMSTotal As Decimal = Math.Sqrt(SSQETotal)
		'Dim RMSSource As Decimal = Math.Sqrt(SSQESource)
		'Dim RMSPower As Decimal = Math.Sqrt(SSQEPower)

		Dim PlotSeries As New Collections.Generic.List(Of PublicData.PlotSeriesData)
		PlotSeries.Add(New PublicData.PlotSeriesData("Total HT % Error", PlotTypeEnum.LinePlot, Color.Red, PercDiffTotal))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT % Error", PlotTypeEnum.LinePlot, Color.BlueViolet, PercDiffSource))
		PlotSeries.Add(New PublicData.PlotSeriesData("Comp. Power % Error", PlotTypeEnum.LinePlot, Color.Green, PercDiffPower))

		Dim MyPlotData As New PublicData.PlotData("% Error", "Heat Transfer Rate/Power [%]", PlotSeries)
		RaiseEvent PlotEvent(MyPlotData)

		'MsgBox("RMS Values: " & vbCrLf & _
		'	"Total Q: " & RMSTotal & vbCrLf & _
		'	"Source Q: " & RMSSource & vbCrLf & _
		'	"Power: " & RMSPower)

	End Sub

End Class

Public Class HeatPump_WaterAir_Heating_WaterSideCurveFit
	Implements IComponentEngine

	Public Structure WAHPHeatingData

		Dim RatedWaterVolFlowRate As Single		'rated water volumetric flow rate [m3/s]
		Dim RatedTotalCap As Single				'rated total heating capacity [W]
		Dim RatedPower As Single				'rated compressor power [W]

		Dim CatalogDataArray(,) As Single		'Base catalog data array (zero-based)

		Dim SourceSideVolFlowRate As List(Of Double)		'Water Volumetric Flow Rate [m3/s]   VSI
		Dim TotalHeatingCapacity As List(Of Double)		'Total Heating Capacity [KW]  HC
		Dim SourceSideHeatRate As List(Of Double)			'Source Side Heat Transfer Rate [KW]   HA
		Dim CompressorPower As List(Of Double)				'Compressor Power [KW]   ER
		Dim SourceSideInletTemp As List(Of Double)			'Water Inlet Temperature [C]   TSI
		Dim PredictedTotHtgCapacity As List(Of Double)		'Data generated by parameters once complete (Qload)
		Dim PredictedSourceHtgRate As List(Of Double)		'Data generated by parameters once complete (Qsource)
		Dim PredictedPowerInput As List(Of Double)			'Data generated by parameters once complete (Winput)

		Sub ReInitDataLists()
			SourceSideVolFlowRate = New List(Of Double)
			TotalHeatingCapacity = New List(Of Double)
			SourceSideInletTemp = New List(Of Double)
			SourceSideHeatRate = New List(Of Double)
			CompressorPower = New List(Of Double)
			PredictedTotHtgCapacity = New List(Of Double)
			PredictedSourceHtgRate = New List(Of Double)
			PredictedPowerInput = New List(Of Double)
		End Sub

	End Structure
	Public WAHPHeating As New WAHPHeatingData

	Public ReadOnly Property EnergyPlusObjectFormat() As String Implements IComponentEngine.EnergyPlusObjectFormat
		Get
            Return ""
		End Get
	End Property

	Public Event PlotEvent(ByVal PlotData As PublicData.PlotData) Implements IComponentEngine.PlotEvent
	Public Event ProgressEvent_Complete(ByVal objectentry As String) Implements IComponentEngine.ProgressEvent_Complete
	Public Event ProgressEvent_Increment() Implements IComponentEngine.ProgressEvent_Increment
	Public Event ProgressEvent_Initialize(ByVal maxvalue As Integer) Implements IComponentEngine.ProgressEvent_Initialize

	Private _GenerateObjectOrParameterList As PublicData.ObjectOrParList
	Public Property GenerateObjectOrParameterList() As PublicData.ObjectOrParList Implements IComponentEngine.GenerateObjectOrParameterList
		Get
			Return Me._GenerateObjectOrParameterList
		End Get
		Set(ByVal value As PublicData.ObjectOrParList)
			Me._GenerateObjectOrParameterList = value
		End Set
	End Property

	Public Function GenerateComponentParameters() As PublicData.ComponentCalculationReturn Implements IComponentEngine.GenerateComponentParameters
		Dim NumDataPoints As Integer = WAHPHeating.CatalogDataArray.GetUpperBound(1) + 1	'Number of Data points
		Dim NumDataPoints_BZ As Integer = NumDataPoints - 1

		Dim NumCoefficients As Integer = 3		'Number of Coefficients in Curve fit
		Dim NumCoefficients_BZ As Integer = NumCoefficients - 1

		RaiseEvent ProgressEvent_Initialize(13)

		Const CelciusToKelvin As Double = 273.15
		Const Tref As Double = 283.15			 'reference temperature = 10C
		Const InstanceCalcCapacity As Integer = 1
		Const InstanceCalcPower As Integer = 2

		WAHPHeating.ReInitDataLists()

		'=============READING INPUT DATA========================
		'Read in the catalog data input
		'*1000=Change kW to W
		For I As Integer = 0 To NumDataPoints_BZ
			WAHPHeating.TotalHeatingCapacity.Add(WAHPHeating.CatalogDataArray(0, I) * 1000)
			WAHPHeating.SourceSideHeatRate.Add(WAHPHeating.CatalogDataArray(1, I) * 1000)
			WAHPHeating.SourceSideInletTemp.Add(WAHPHeating.CatalogDataArray(2, I))
			WAHPHeating.SourceSideVolFlowRate.Add(WAHPHeating.CatalogDataArray(3, I))
			WAHPHeating.CompressorPower.Add(WAHPHeating.CatalogDataArray(4, I) * 1000)
		Next I
		RaiseEvent ProgressEvent_Increment()

		Dim C1 As MatrixLibrary.Matrix = Nothing
		Dim C2 As MatrixLibrary.Matrix = Nothing

		For InstanceNum As Integer = InstanceCalcCapacity To InstanceCalcPower

			'Redimension all arrays to the required size determined by number of coefficients and number of data points.
			Dim F As New MatrixLibrary.Matrix(NumDataPoints, NumCoefficients)
			Dim Y As New MatrixLibrary.Matrix(NumDataPoints, 1)
			RaiseEvent ProgressEvent_Increment()

			'Fill in the F matrix
			For I As Integer = 0 To NumDataPoints_BZ
				F(I, 0) = 1
				F(I, 1) = ((WAHPHeating.SourceSideInletTemp(I) + CelciusToKelvin) / Tref)
				F(I, 2) = (WAHPHeating.SourceSideVolFlowRate(I) / WAHPHeating.RatedWaterVolFlowRate)
			Next
			RaiseEvent ProgressEvent_Increment()

			'Fill Y array based on which instance we are on
			For I As Integer = 0 To NumDataPoints_BZ
				Select Case InstanceNum
					Case InstanceCalcCapacity
						Y(I, 0) = WAHPHeating.TotalHeatingCapacity(I) / WAHPHeating.RatedTotalCap
					Case InstanceCalcPower
						Y(I, 0) = WAHPHeating.CompressorPower(I) / WAHPHeating.RatedPower
				End Select
			Next
			RaiseEvent ProgressEvent_Increment()

			'Do the required matrix operations to get Coefficient matrix.
			Try
				Select Case InstanceNum
					Case InstanceCalcCapacity
						C1 = MatrixLibrary.Matrix.SolveEqSet(F, Y)
					Case InstanceCalcPower
						C2 = MatrixLibrary.Matrix.SolveEqSet(F, Y)
				End Select
			Catch ex As Exception
				Return New PublicData.ComponentCalculationReturn(False, "Matrix inverse routine error, could be bad input data")
			End Try
			RaiseEvent ProgressEvent_Increment()

			'Generate Outputs
			For I As Integer = 0 To NumDataPoints_BZ
				Select Case InstanceNum
					Case InstanceCalcCapacity
						WAHPHeating.PredictedTotHtgCapacity.Add(WAHPHeating.RatedTotalCap * _
						(C1(0, 0) * F(I, 0) + _
						 C1(1, 0) * F(I, 1) + _
						 C1(2, 0) * F(I, 2)))
					Case InstanceCalcPower
						WAHPHeating.PredictedPowerInput.Add(WAHPHeating.RatedPower * _
						(C2(0, 0) * F(I, 0) + _
						 C2(1, 0) * F(I, 1) + _
						 C2(2, 0) * F(I, 2)))
						WAHPHeating.PredictedSourceHtgRate.Add(WAHPHeating.PredictedTotHtgCapacity(I) - WAHPHeating.PredictedPowerInput(I))
				End Select
			Next
			RaiseEvent ProgressEvent_Increment()

		Next InstanceNum
		RaiseEvent ProgressEvent_Increment()

		'Output the data
		Dim TextOutput As String = ""
		Select Case Me.GenerateObjectOrParameterList
			Case ObjectOrParList.EnergyPlusObject
				'error, no E+ object for this model
			Case ObjectOrParList.ParameterList
				Dim TextBuilder As New System.Text.StringBuilder
				TextBuilder.AppendLine("**Begin Nomenclature**")
				TextBuilder.AppendLine("HC: Heating Capacity")
				TextBuilder.AppendLine("HP: Heating Power Consumption")
				TextBuilder.AppendLine("TSI: Entering Water Temperature")
				TextBuilder.AppendLine("VSI: Entering Water Flow Rate")
				TextBuilder.AppendLine("Subscript _R: Rated Value")
				TextBuilder.AppendLine("Subscript _#: Coefficient #")
				TextBuilder.AppendLine("**End Nomenclature**")
				TextBuilder.AppendLine()
				TextBuilder.AppendLine("**Begin Governing Equations**")
				TextBuilder.AppendLine("(HC/HC_R) = HC_1 + HC_2*(TSI/TSI_R) + HC_3*(VSI/VSI_R)")
				TextBuilder.AppendLine("(HP/HP_R) = HP_1 + HP_2*(TSI/TSI_R) + HP_3*(VSI/VSI_R)")
				TextBuilder.AppendLine("**End Governing Equations**")
				TextBuilder.AppendLine()
				TextBuilder.AppendLine("**Begin Reporting Parameters**")
				For J As Integer = 0 To NumCoefficients_BZ
					TextBuilder.AppendLine("Heating Capacity Coefficient HC_" & (J + 1).ToString & ": " & Math.Round(C1(J, 0), DecPts).ToString)
				Next
				For J As Integer = 0 To NumCoefficients_BZ
					TextBuilder.AppendLine("Heating Power Consumption Coefficient HP_" & (J + 1).ToString & ": " & Math.Round(C2(J, 0), DecPts).ToString)
				Next
				TextBuilder.AppendLine("Rated Heating Capacity: " & WAHPHeating.RatedTotalCap.ToString & "{kW}")
				TextBuilder.AppendLine("Rated Heating Power Consumption: " & WAHPHeating.RatedPower.ToString & "{kW}")
				TextBuilder.AppendLine("Rated Water Volumetric Flow Rate: " & WAHPHeating.RatedWaterVolFlowRate.ToString & "{m3/s}")
				TextBuilder.AppendLine("**End Reporting Parameters**")
				TextOutput = TextBuilder.ToString
		End Select
		RaiseEvent ProgressEvent_Increment()
		RaiseEvent ProgressEvent_Complete(TextOutput)

		GenerateComponentParameters.Success = True
		GenerateComponentParameters.ErrorMessage = ""
	End Function

	Public Sub GeneratePlot_Absolute() Implements IComponentEngine.GeneratePlot_Absolute
		Dim PlotSeries As New Collections.Generic.List(Of PublicData.PlotSeriesData)

		PlotSeries.Add(New PublicData.PlotSeriesData("Total HT Model Output", PlotTypeEnum.LinePlot, Color.Red, WAHPHeating.PredictedTotHtgCapacity.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Total HT Catalog Data", PlotTypeEnum.PointPlot, Color.Red, WAHPHeating.TotalHeatingCapacity.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT Model Output", PlotTypeEnum.LinePlot, Color.BlueViolet, WAHPHeating.PredictedSourceHtgRate.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT Catalog Data", PlotTypeEnum.PointPlot, Color.BlueViolet, WAHPHeating.SourceSideHeatRate.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Compressor Power Model Output", PlotTypeEnum.LinePlot, Color.Green, WAHPHeating.PredictedPowerInput.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Compressor Power Catalog Data", PlotTypeEnum.PointPlot, Color.Green, WAHPHeating.CompressorPower.ToArray))

		Dim MyPlotData As New PublicData.PlotData("Model vs. Catalog Data Points", "Heat Transfer Rate/Power [W]", PlotSeries)
		RaiseEvent PlotEvent(MyPlotData)
	End Sub

	Public Sub GeneratePlot_PercentError() Implements IComponentEngine.GeneratePlot_PercentError
		Dim UpperBound As Integer = WAHPHeating.PredictedTotHtgCapacity.Count - 1
		Dim PercDiffTotal(UpperBound) As Double
		Dim PercDiffSource(UpperBound) As Double
		Dim PercDiffPower(UpperBound) As Double

		'Dim SSQETotal As Decimal = 0.0
		'Dim SSQESource As Decimal = 0.0
		'Dim SSQEPower As Decimal = 0.0

		For I As Integer = 1 To UpperBound
			PercDiffTotal(I) = 100 * (WAHPHeating.PredictedTotHtgCapacity(I) - WAHPHeating.TotalHeatingCapacity(I)) / WAHPHeating.TotalHeatingCapacity(I)
			PercDiffSource(I) = 100 * (WAHPHeating.PredictedSourceHtgRate(I) - WAHPHeating.SourceSideHeatRate(I)) / WAHPHeating.SourceSideHeatRate(I)
			PercDiffPower(I) = 100 * (WAHPHeating.PredictedPowerInput(I) - WAHPHeating.CompressorPower(I)) / WAHPHeating.CompressorPower(I)
			'SSQETotal += (WAHPHeating.PredictedTotHtgCapacity(I) - (WAHPHeating.CatalogDataArray(2, I) * 1000)) ^ 2
			'SSQESource += (WAHPHeating.PredictedSourceHtgRate(I) - (WAHPHeating.CatalogDataArray(3, I) * 1000)) ^ 2
			'SSQEPower += (WAHPHeating.PredictedPowerInput(I) - (WAHPHeating.CatalogDataArray(6, I) * 1000)) ^ 2
		Next

		'Dim RMSTotal As Decimal = Math.Sqrt(SSQETotal)
		'Dim RMSSource As Decimal = Math.Sqrt(SSQESource)
		'Dim RMSPower As Decimal = Math.Sqrt(SSQEPower)

		Dim PlotSeries As New Collections.Generic.List(Of PublicData.PlotSeriesData)
		PlotSeries.Add(New PublicData.PlotSeriesData("Total HT % Error", PlotTypeEnum.LinePlot, Color.Red, PercDiffTotal))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT % Error", PlotTypeEnum.LinePlot, Color.BlueViolet, PercDiffSource))
		PlotSeries.Add(New PublicData.PlotSeriesData("Comp. Power % Error", PlotTypeEnum.LinePlot, Color.Green, PercDiffPower))

		Dim MyPlotData As New PublicData.PlotData("% Error", "Heat Transfer Rate/Power [%]", PlotSeries)
		RaiseEvent PlotEvent(MyPlotData)
	End Sub


End Class

Public Class HeatPump_WaterAir_Heating_ParameterEstimation
	Implements IComponentEngine

	Public Structure WAHPHeatingData

		Dim Accuracy As Double
		Dim CompressorType As PublicData.CompressorType
		Dim Refrigerant As PublicData.RefrigerantType
		Dim FluidType As PublicData.FluidType

		Dim CatalogDataArray(,) As Single		'Base catalog data array (zero-based)

		Dim LoadSideInletTemp As List(Of Double)		'Inlet Air Dry Bulb Temp [C]   TLI
		Dim LoadSideVolFlowRate As List(Of Double)			'Air Volumetric Flow Rate [m3/s]  VL
		Dim SourceSideVolFlowRate As List(Of Double)		'Water Volumetric Flow Rate [m3/s]   VSI
		Dim TotalHeatingCapacity As List(Of Double)		'Total Heating Capacity [KW]  HC
		Dim SourceSideHeatRate As List(Of Double)			'Source Side Heat Transfer Rate [KW]   HA
		Dim CompressorPower As List(Of Double)				'Compressor Power [KW]   ER
		Dim SourceSideInletTemp As List(Of Double)			'Water Inlet Temperature [C]   TSI
		Dim PredictedTotHtgCapacity As List(Of Double)		'Data generated by parameters once complete (Qload)
		Dim PredictedSourceHtgRate As List(Of Double)		'Data generated by parameters once complete (Qsource)
		Dim PredictedPowerInput As List(Of Double)			'Data generated by parameters once complete (Winput)

		Sub ReInitDataLists()
			LoadSideInletTemp = New List(Of Double)
			LoadSideVolFlowRate = New List(Of Double)
			SourceSideVolFlowRate = New List(Of Double)
			TotalHeatingCapacity = New List(Of Double)
			SourceSideInletTemp = New List(Of Double)
			SourceSideHeatRate = New List(Of Double)
			CompressorPower = New List(Of Double)
			PredictedTotHtgCapacity = New List(Of Double)
			PredictedSourceHtgRate = New List(Of Double)
			PredictedPowerInput = New List(Of Double)
		End Sub

	End Structure
	Public WAHPHeating As New WAHPHeatingData

	Public ReadOnly Property EnergyPlusObjectFormat() As String Implements IComponentEngine.EnergyPlusObjectFormat
		Get
            Return ""
		End Get
	End Property

	Public Property GenerateObjectOrParameterList() As PublicData.ObjectOrParList Implements IComponentEngine.GenerateObjectOrParameterList
		Get

		End Get
		Set(ByVal value As PublicData.ObjectOrParList)

		End Set
	End Property

	Public Sub GeneratePlot_Absolute() Implements IComponentEngine.GeneratePlot_Absolute

	End Sub

	Public Sub GeneratePlot_PercentError() Implements IComponentEngine.GeneratePlot_PercentError

	End Sub

	Public Event PlotEvent(ByVal PlotData As PublicData.PlotData) Implements IComponentEngine.PlotEvent

	Public Event ProgressEvent_Complete(ByVal objectentry As String) Implements IComponentEngine.ProgressEvent_Complete

	Public Event ProgressEvent_Increment() Implements IComponentEngine.ProgressEvent_Increment

	Public Event ProgressEvent_Initialize(ByVal maxvalue As Integer) Implements IComponentEngine.ProgressEvent_Initialize


	Public Function GenerateComponentParameters() As PublicData.ComponentCalculationReturn Implements IComponentEngine.GenerateComponentParameters

		Dim NumDataPoints As Integer = WAHPHeating.CatalogDataArray.GetUpperBound(1) + 1	'Number of Data points
		Dim NumDataPoints_BZ As Integer = NumDataPoints - 1

		Dim NumCoefficients As Integer	'Number of Coefficients in Curve fit
		
		RaiseEvent ProgressEvent_Initialize(13)

		WAHPHeating.ReInitDataLists()

		'Select refindex based on refrigerant
		'the ENUM is zero-based, but the refrigerant data arrays is one-based...I THINK!
		Dim RefIndex As Integer = WAHPHeating.Refrigerant + 1

		'Select number of parameters according to compressor type
		If WAHPHeating.FluidType = FluidType.Water Then
			Select Case WAHPHeating.CompressorType
				Case CompressorType.Scroll
					NumCoefficients = 8
				Case CompressorType.Reciprocating
					NumCoefficients = 8
				Case CompressorType.Rotary
					NumCoefficients = 7
				Case Else
					Return New ComponentCalculationReturn(False, "Compressor type not recognized")
			End Select
		ElseIf WAHPHeating.FluidType = FluidType.Antifreeze Then
			Select Case WAHPHeating.CompressorType
				Case CompressorType.Scroll
					NumCoefficients = 9
				Case CompressorType.Reciprocating
					NumCoefficients = 9
				Case CompressorType.Rotary
					NumCoefficients = 8
				Case Else
					Return New ComponentCalculationReturn(False, "Compressor type not recognized")
			End Select
		Else
			Return New ComponentCalculationReturn(False, "Fluid type not recognized")
		End If
		Dim NumCoefficients_BZ As Integer = NumCoefficients - 1

		Dim X(NumCoefficients_BZ, NumCoefficients_BZ) As Double

		'=============READING INPUT DATA========================
		'Read in the catalog data input
		'*1000=Change kW to W
		For I As Integer = 0 To NumDataPoints_BZ
			WAHPHeating.LoadSideInletTemp.Add(WAHPHeating.CatalogDataArray(0, I))
			WAHPHeating.LoadSideVolFlowRate.Add(WAHPHeating.CatalogDataArray(1, I))
			WAHPHeating.TotalHeatingCapacity.Add(WAHPHeating.CatalogDataArray(2, I) * 1000)
			WAHPHeating.SourceSideHeatRate.Add(WAHPHeating.CatalogDataArray(3, I) * 1000)
			WAHPHeating.SourceSideInletTemp.Add(WAHPHeating.CatalogDataArray(4, I))
			WAHPHeating.SourceSideVolFlowRate.Add(WAHPHeating.CatalogDataArray(5, I))
			WAHPHeating.CompressorPower.Add(WAHPHeating.CatalogDataArray(6, I) * 1000)
		Next I



		'		'=============GENERATING PARAMETERS========================
		'		'Status of the simulation
		'		'Read initial guess of parameters
		'		For I As Integer = 0 To NumCoefficients_BZ
		'			X(1, I) = Worksheets("ParamEstimator").Cells(11 + I, guessnum + 1)
		'		Next I

		'		'An iteration loop to help in setting the evaporator temperature limit and prevent program
		'		'from crashing
		'		TElimit = -100
		'20:	 NMerrorflag = False
		'		Call NelderMead(n, X(), np, accuracy, comptype)
		'		If (Not NMerrorflag) Then
		'			MIerrorflag = False
		'			Call MI(guessnum, n, np, X(), comptype)
		'			If (MIerrorflag = True) Then
		'				TElimit = 0.75 * TElimit
		'				GoTo 20
		'			End If
		'		Else
		'			MsgBox("Error occurs in generating parameters.")
		'			Exit Function
		'		End If

		'		'Print the parameters generated from Nelder Mead
		'		For i = 1 To np
		'			Worksheets("ParamEstimator").Cells(22 + i, guessnum + 1) = X(np + 1, i)
		'		Next i

		Return New ComponentCalculationReturn(True, "")

	End Function

	'	Private Sub NelderMead(ByVal n As Integer, ByVal X() As Double, ByVal np As Integer, ByVal ACC As Double, ByVal comptype As String)
	'		Dim NP1 As Integer, Q As Single, P As Single, M As Integer, i As Integer, _
	'		 j As Integer, AP As Integer, ITR As Integer, Z() As Double

	'		Dim ZHI As Double, ZLO As Double, k As Integer, EN As Integer, SUM As Double, _
	'		 EJ As Double, L As Integer, ZCEN As Double, ZREF As Double, ZCON As Double, ZEX As Double
	'ReDim XCEN(np + 1, np) As Double, XREF(np + 1, np) As Double, _
	'    XCON(np + 1, np) As Double, XEX(np + 1, np) As Double, Z(np + 1) As Double


	'		Const ITMAX As Single = 1000  'Max number of iteration
	'		Const ALFA As Single = 1	   'Reflection coefficient  ALFA>0
	'		Const BETA As Single = 0.5	   'Contraction coefficient 0<BETA<1
	'		Const GAM As Single = 2		   'Expansion coefficient
	'		Const A As Single = 0.1



	'Open "NM_OUPUT.txt" For Output As #1

	'		NP1 = np + 1
	'		Q = (A / np * (2 ^ 0.5)) * ((np + 1) ^ 0.5 - 1)
	'		P = (A / np * (2 ^ 0.5)) * ((np + 1) ^ 0.5 + np - 1)
	'		M = np + 1

	'		For i = 2 To M
	'			AP = 1
	'			For j = 1 To np
	'				AP = AP + 1
	'				If (i = AP) Then
	'					X(i, j) = X(1, j) + P
	'				Else
	'					X(i, j) = X(1, j) + Q
	'				End If
	'			Next j
	'		Next i

	'Write #1, Tab(3); "NELDER MEAD OPTIMIZATIION"
	'Write #1, "N=", n; Tab(10); "ACC="; ACC; Tab(30); "ALFA="; ALFA; Tab(42); "BETA="; BETA; Tab(56); "GAM="; GAM
	'Write #1,
	'Write #1, "Starting Simplex"
	'Write #1, "-----------------------------------------------------------"
	'Write #1,

	'		'-------BEGIN NELDER MEAD ROUTINE--------------------------
	'		ITR = 0
	'150:	For i = 1 To NP1
	'			Call PE1(n, i, X(), Z(), np, NP1, comptype)
	'		Next i
	'		ITR = ITR + 1

	'		If (ITR >= ITMAX) Then GoTo 145

	'158   Write #1, "Iteration Number", ITR

	'		ZHI = Max(Z(), NP1)
	'		ZLO = Min(Z(), NP1)

	'		For i = 1 To NP1
	'			If (ZHI = Z(i)) Then Exit For
	'		Next i
	'		k = i
	'		EN = np
	'		For j = 1 To np
	'			SUM = 0
	'			For i = 1 To NP1
	'				If (k = i) Then GoTo 175
	'				SUM = SUM + X(i, j)
	'175:		Next i
	'			XCEN(k, j) = SUM / EN
	'		Next j

	'		i = k
	'		Call PE1(n, i, XCEN(), Z(), np, NP1, comptype)
	'		ZCEN = Z(i)
	'		SUM = 0

	'		For i = 1 To NP1
	'			If (k = i) Then GoTo 185
	'			SUM = SUM + (Z(i) - ZCEN) * (Z(i) - ZCEN) / EN
	'185:	Next i

	'		EJ = (SUM) ^ 0.5
	'		If (EJ < ACC) Then GoTo 998
	'      Write #1, "Optimum value of F="; ZLO
	'      Write #1,

	'		For j = 1 To np
	'			XREF(k, j) = XCEN(k, j) + ALFA * (XCEN(k, j) - X(k, j))
	'		Next j
	'		i = k
	'		Call PE1(n, i, XREF(), Z(), np, NP1, comptype)
	'		ZREF = Z(i)

	'		For i = 1 To NP1
	'			If (ZLO = Z(i)) Then Exit For
	'		Next i

	'		L = i
	'		If (ZREF <= Z(L)) Then GoTo 240
	'		For i = 1 To NP1
	'			If (ZREF < Z(i)) Then GoTo 208
	'		Next i
	'		GoTo 215

	'208:	For j = 1 To np
	'			X(k, j) = XREF(k, j)
	'		Next j
	'		GoTo 150

	'215:	For j = 1 To np
	'			XCON(k, j) = XCEN(k, j) + BETA * (X(k, j) - XCEN(k, j))
	'		Next j
	'		i = k
	'		Call PE1(n, i, XCON(), Z(), np, NP1, comptype)
	'		ZCON = Z(i)
	'		If (ZCON < Z(k)) Then GoTo 230

	'		For j = 1 To np
	'			For i = 1 To NP1
	'				X(i, j) = (X(i, j) + X(L, j)) / 2
	'			Next i
	'		Next j
	'		GoTo 150

	'230:	For j = 1 To np
	'			X(k, j) = XCON(k, j)
	'		Next j

	'240:	For j = 1 To np
	'			XEX(k, j) = XCEN(k, j) + GAM * (XREF(k, j) - XCEN(k, j))
	'		Next j

	'		i = k
	'		Call PE1(n, i, XEX(), Z(), np, NP1, comptype)
	'		ZEX = Z(i)
	'		If (ZEX < Z(L)) Then GoTo 255

	'		For j = 1 To np
	'			X(k, j) = XREF(k, j)
	'		Next j
	'		GoTo 150

	'255:	For j = 1 To np
	'			X(k, j) = XEX(k, j)
	'		Next j
	'		GoTo 150

	'145   Write #1, "DID NOT CONVERGE IN", ITR
	'		MsgBox("Fail to converge in 1000 iterations. Change accuracy", , "Interation Problem")
	'998   Write #1, "FINAL OPTIMUM VALUE OF F=", ZLO
	'      Write #1, "OPTIMUM VALUES OF VARIABLES "
	'      Write #1, "------------------------------------------------------"
	'		For i = 1 To np
	'      Write #1, X(NP1, i)
	'		Next i
	'Close #1
	'	End Sub

	'	Private Sub PE1(ByVal n As Integer, ByVal i As Integer, ByVal X(,) As Double, ByVal Z() As Double, ByVal np As Integer, _
	'   ByVal NP1 As Integer, ByVal comptype As String)
	'		'Declare Parameter Variables
	'		Dim VR As Single, VI As Single, C As Single, UAL As Single, UAS As Single, ETA As Single
	'		Dim WLOSS As Single, SH As Single, PD As Single, DP1 As Single, DP2 As Single, VD As Single
	'		Dim RS1 As Single, RS2 As Single

	'		'Declare Subroutine Variables
	'		Dim EL As Single, Cpos As Single, AMS As Single, ES As Single, TE As Single, PE As Single, TC As Single
	'		Dim PC As Single, V1 As Single, V31 As Single, H1 As Single, H3 As Single, T10 As Single, DF As Single
	'		Dim V10 As Single, H10 As Single, T11 As Single, V11 As Single, AMR As Single, QS As Single
	'		Dim WT As Single, W As Single, PSUC As Single, PDIS As Single, k As Integer

	'		Const ANN As Single = 1.114	' ANN = insentropic exponent
	'		' PARAMETER VALUE
	'		' UAL = load side UA coefficient (KW/K)
	'		' SH = superheat temperature (C)
	'		' WLOSS = power losses (KW)
	'		' ETA = loss factor (mechanical efficiency of compressor)

	'		'------"SCROLL COMPRESSOR"-----
	'		' VR = the refrigerant volume flow rate at the beginning
	'		'      of the compression (m^3/s)
	'		' VI= built-in-volume ratio (dimensionless)
	'		' C = coefficient to define the relationship between pressure ratio
	'		'     and leakage rate (dimensionless)

	'		'------"RECIPROCATING COMPRESSOR"-----
	'		' PD = compressor piston displacement (m^2/s)
	'		' DP1 = compressor suction pressure drop (KPa)
	'		' C = compressor clearance factor (dimensionless)

	'		'------"ROTARY COMPRESSOR"-----
	'		' VD = displacement of the rolling piston compressor
	'		' DP1 = compressor suction pressure drop (KPa)

	'		'Without antifreeze
	'		'UAS = source side heat transfer coefficient (KW/K)
	'		'With antifreeze
	'		'RS1= source side heat transfer resistance coefficient 1 (K-m^3/KW-s)
	'		'RS2= source side heat transfer  resistance coefficient 2 (K/KW)

	'10:
	'		UAL = X(i, 1) ^ 2
	'		SH = X(i, 2) ^ 2
	'		WLOSS = X(i, 3) ^ 2
	'		ETA = X(i, 4) ^ 2

	'		Select Case comptype
	'			Case "SCROLL"
	'				VR = X(i, 5) ^ 2
	'				VI = X(i, 6) ^ 2
	'				C = X(i, 7) ^ 2
	'				If FluidType = 0 Then
	'					UAS = X(i, 8) ^ 2
	'				Else
	'					RS1 = X(i, 8) ^ 2
	'					RS2 = X(i, 9) ^ 2
	'				End If
	'			Case "RECIPROCATING"
	'				PD = X(i, 5) ^ 2
	'				DP1 = X(i, 6) ^ 2
	'				DP2 = DP1
	'				C = X(i, 7) ^ 2
	'				If FluidType = 0 Then
	'					UAS = X(i, 8) ^ 2
	'				Else
	'					RS1 = X(i, 8) ^ 2
	'					RS2 = X(i, 9) ^ 2
	'				End If
	'			Case "ROTARY"
	'				VD = X(i, 5) ^ 2
	'				DP1 = X(i, 6) ^ 2
	'				DP2 = DP1
	'				If FluidType = 0 Then
	'					UAS = X(i, 7) ^ 2
	'				Else
	'					RS1 = X(i, 7) ^ 2
	'					RS2 = X(i, 8) ^ 2
	'				End If
	'		End Select

	'		Z(i) = 0
	'		For k = 1 To n
	'			'-------COMPUTE SOURCE SIDE AND LOAD SIDE EFFECTIVENESS--------
	'			' Load side effectiveness
	'			EL = 1 - Exp(-UAL / (VL(k) * 1.2 * 1.005))
	'			' Specific heat for source side inlet water (KJ/Kg)
	'			If FluidType = 0 Then
	'				' Calculate source side effectiveness without antifreeze
	'				AMS = VSI(k) * WRHO(TSI(k))
	'				Cpos = WCP(TSI(k))
	'				' Source side effectiveness (EQ 5.2)
	'				ES = 1 - Exp(-UAS / (AMS * Cpos))
	'			Else
	'				' Calculate source side effectiveness with antifreeze
	'				AMS = VSI(k) * WRHO(TSI(k))
	'				Cpos = WCP(TSI(k))
	'				DF = 1
	'				UAS = 1 / ((RS1 * VSI(k) ^ (-0.8)) / DF + RS2)
	'				' Source side effectiveness (EQ 5.2)
	'				ES = 1 - Exp(-UAS / (AMS * Cpos))
	'			End If

	'			'-------COMPUTE EVAPORATING AND CONDENSING TEMPERATURE---------
	'			' Evaporating temperature (source side)(C)
	'			TE = TSI(k) - HA(k) / (ES * AMS * Cpos)
	'			' Condensing temperature (load side)(C)
	'			TC = TLI(k) + HC(k) / (EL * VL(k) * 1.2 * 1.005)
	'			'Make adjustment to the parameter UAS if TE is too low
	'			If TE < TElimit Then
	'				If FluidType = 0 Then
	'					X(i, 8) = X(i, 8) * 1.05
	'				Else
	'					If comptype = "ROTARY" Then
	'						X(i, 7) = X(i, 7) * 0.95
	'						X(i, 8) = X(i, 8) * 0.95
	'					Else 'reciprocating and scroll
	'						X(i, 8) = X(i, 8) * 0.95
	'						X(i, 9) = X(i, 9) * 0.95
	'					End If
	'				End If
	'				GoTo 10
	'			End If

	'			'Make adjustment to the parameter UAL if TC is too high
	'			If TC > 1000 Then
	'				X(i, 1) = X(i, 1) * 0.95
	'				GoTo 10
	'			End If

	'			' Condensing Pressure (Pa)
	'			PC = PSAT(TC, refindex)
	'			' Evaporating Pressure (Pa)
	'			PE = PSAT(TE, refindex)

	'			Select Case comptype
	'				Case "SCROLL"
	'					PSUC = PE
	'					PDIS = PC

	'				Case "RECIPROCATING"
	'					PSUC = PE - DP1
	'					PDIS = PC + DP2
	'					If PSUC < 0 Then
	'						MsgBox("Compressor suction pressure<0. Make sure the type of compressor is correct")
	'					End If

	'				Case "ROTARY"
	'					PSUC = PE
	'					PDIS = PC + DP2
	'			End Select

	'			'-------IDENTIFY CONDENSER AND EVAPORATOR EXITS----------
	'			' Evaporator outlet specific volume,V1 & condenser outlet specific volume,V31

	'			V1 = VGAS(PE, TE, 0.0001, refindex)
	'			V31 = VGAS(PC, TC, 0.001, refindex)
	'			' Evaporator outlet enthalpy,H1 & condenser outlet enthapy,H3(KJ/kg)
	'			H1 = HGAS(PE, V1, TE, refindex)
	'			H3 = HGAS(PC, V31, TC, refindex) - DHLAT(PC, V31, TC, refindex)

	'			'-------COMPUTE REFRIGERANT MASS FLOW RATE FROM COMPRESSOR MODEL------
	'			' The superheated gas specific volume,V10 (m^3/kg)
	'			T10 = TE + SH
	'			V10 = VGAS(PE, T10, 0.0001, refindex)
	'			' The superheated gas enthalpy,H10(KJ/Kg)
	'			H10 = HGAS(PE, V10, T10, refindex)
	'			' The compressor suction temperature and specific volume (m^3/Kg)
	'			T11 = TPH(PSUC, H10, 0.001, refindex)
	'			V11 = VGAS(PSUC, T11, 0.0001, refindex)

	'			Select Case comptype
	'				Case "SCROLL"
	'					' The "Scroll" compressor refrigerant mass flow rate,AMR(Kg/s) (EQ 6.7 and EQ 6.8)
	'					AMR = VR / V11 - C * PDIS / PSUC
	'				Case "RECIPROCATING"
	'					'The "Reciprocating" Compressor refrigerant mass flow rate,AMR(Kg/s) (EQ 4.4)
	'					AMR = PD / V11 * (1 + C - C * (PDIS / PSUC) ^ (1 / ANN))
	'				Case "ROTARY"
	'					AMR = VD / V11
	'			End Select

	'			'-------COMPUTE TOTAL SOURCE SIDE HEAT TRANSFER RATE,QS(KW)-----------
	'			QS = AMR * (H1 - H3)
	'			'--------COMPUTE COMPRESSOR POWER CONSUMPTION,WT FROM MODEL------------

	'			Select Case comptype
	'				Case "SCROLL"
	'					' The theoritical "Scroll" compressor power input,WT(KW) (EQ 6.5)
	'					WT = ANN / (ANN - 1) * PSUC * VR * ((ANN - 1) / ANN * (PDIS / PSUC) / VI + 1 / ANN * VI ^ (ANN - 1) - 1)
	'				Case "RECIPROCATING"
	'					'The theoritical "Reciprocating" compressor power input,WT(KW) (EQ 4.6)
	'					WT = AMR * ANN / (ANN - 1) * PSUC * V11 * ((PDIS / PSUC) ^ ((ANN - 1) / ANN) - 1)
	'				Case "ROTARY"
	'					WT = AMR * ANN / (ANN - 1) * PSUC * V11 * ((PDIS / PSUC) ^ ((ANN - 1) / ANN) - 1)
	'			End Select
	'			' The actual compressor power input,W(KW) (EQ 4.7)
	'			W = WLOSS + (1 / ETA) * WT

	'			'--------THE OBJECTIVE FUNCTION---------------------------------------
	'			Z(i) = Z(i) + ((ER(k) - W) / ER(k)) ^ 2 + ((HC(k) - QS - W) / HC(k)) ^ 2 + ((QS - HA(k)) / HA(k)) ^ 2
	'		Next k
	'	End Sub

	'	Private Sub MI(ByVal guessnum As Integer, ByVal n As Integer, ByVal np As Integer, ByVal X() As Double, ByVal comptype As String)
	'		' INPUT FROM CATALOG
	'		' TLI = load side inlet air dry bulb temperature (degree C)
	'		' VL = load side volumetric air flow rate (m^3)
	'		' HC = heating capacity (KW)
	'		' HA = source side heat absorbtion (KW)
	'		' TSI = source side inlet water temperature (degree C)
	'		' AMS = source side water mass flow rate (kg/s)
	'		' ER = compressor power input (KW)

	'		'Declare Parameter Variables
	'		Dim VR As Double, VI As Double, C As Double, UAL As Double, UAS As Double, ETA As Double
	'		Dim WLOSS As Double, SH As Double, PD As Double, DP1 As Double, DP2 As Double, VD As Double
	'		Dim RS1 As Double, RS2 As Double
	'		'Declare Subroutine Variables
	'		Dim AMS As Single, EL As Single, Cpos As Single, ES As Single, TE As Single, PE As Single, TC As Single
	'		Dim DF As Single, PC As Single, V1 As Single, V31 As Single, H1 As Single, H3 As Single, T10 As Single
	'		Dim V10 As Single, H10 As Single, T11 As Single, V11 As Single, AMR As Single, QS As Single
	'		Dim WT As Single, W As Single, k As Integer, QLGUESS As Single, QSGUESS As Single, QL As Single
	'		Dim PSUC As Single, PDIS As Single, QLmean As Single, QSmean As Single, SUM As Single

	'		Const ANN As Single = 1.114	' ANN = insentropic exponent
	'		' PARAMETER VALUE
	'		' UAL = load side UA coefficient (KW/K)
	'		' UAS = source side UA coefficient (KW/K)
	'		' SH = superheat temperature (C)
	'		' WLOSS = power losses (KW)
	'		' ETA = loss factor (mechanical efficiency of compressor)

	'		'------"SCROLL COMPRESSOR"-----
	'		' VR = the refrigerant volume flow rate at the beginning
	'		'      of the compression (m^3/s)
	'		' VI= built-in-volume ratio (dimensionless)
	'		' C = coefficient to define the relationship between pressure ratio
	'		'     and leakage rate (dimensionless)

	'		'------"RECIPROCATING COMPRESSOR"-----
	'		' PD = compressor piston displacement (m^2/s)
	'		' DP1 = compressor suction pressure drop (KPa)
	'		' C = compressor clearance factor (dimensionless)

	'		'------"ROTARY COMPRESSOR"-----
	'		' VD = displacement of the rolling piston compressor
	'		' DP1 = compressor suction pressure drop (KPa)

	'		UAL = X(np + 1, 1) ^ 2
	'		SH = X(np + 1, 2) ^ 2
	'		WLOSS = X(np + 1, 3) ^ 2
	'		ETA = X(np + 1, 4) ^ 2

	'		Select Case comptype
	'			Case "SCROLL"
	'				VR = X(np + 1, 5) ^ 2
	'				VI = X(np + 1, 6) ^ 2
	'				C = X(np + 1, 7) ^ 2
	'				If fluidtype = 0 Then
	'					UAS = X(np + 1, 8) ^ 2
	'				Else
	'					RS1 = X(np + 1, 8) ^ 2
	'					RS2 = X(np + 1, 9) ^ 2
	'				End If

	'			Case "RECIPROCATING"
	'				PD = X(np + 1, 5) ^ 2
	'				DP1 = X(np + 1, 6) ^ 2
	'				DP2 = DP1
	'				C = X(np + 1, 7) ^ 2
	'				If fluidtype = 0 Then
	'					UAS = X(np + 1, 8) ^ 2
	'				Else
	'					RS1 = X(np + 1, 8) ^ 2
	'					RS2 = X(np + 1, 9) ^ 2
	'				End If
	'			Case "ROTARY"
	'				VD = X(np + 1, 5) ^ 2
	'				DP1 = X(np + 1, 6) ^ 2
	'				DP2 = DP1
	'				If fluidtype = 0 Then
	'					UAS = X(np + 1, 7) ^ 2
	'				Else
	'					RS1 = X(np + 1, 7) ^ 2
	'					RS2 = X(np + 1, 8) ^ 2
	'				End If
	'		End Select

	'		'Calculate the mean Qload and use it as initial QLGUESS
	'		For k = 1 To n
	'			SUM = SUM + HC(k)
	'		Next k
	'		QLmean = SUM / n
	'		SUM = 0
	'		'Calculate the mean Qsource and use it as initial QSGUESS
	'		For k = 1 To n
	'			SUM = SUM + HA(k)
	'		Next k
	'		QSmean = SUM / n
	'		SUM = 0

	'		For k = 1 To n
	'			QLGUESS = QLmean
	'30:		 QSGUESS = QSmean
	'			'-------COMPUTE SOURCE SIDE AND LOAD SIDE EFFECTIVENESS--------
	'			' Load side effectiveness
	'40:		 EL = 1 - Exp(-UAL / (VL(k) * 1.2 * 1.005))
	'			If fluidtype = 0 Then
	'				' Calculate source side effectiveness without antifreeze
	'				AMS = VSI(k) * WRHO(TSI(k))
	'				Cpos = WCP(TSI(k))
	'				' Source side effectiveness (EQ 5.2)
	'				ES = 1 - Exp(-UAS / (AMS * Cpos))
	'			Else
	'				' Calculate source side effectiveness with antifreeze
	'				AMS = VSI(k) * WRHO(TSI(k))
	'				Cpos = WCP(TSI(k))
	'				DF = 1
	'				UAS = 1 / ((RS1 * VSI(k) ^ (-0.8)) / DF + RS2)
	'				' Source side effectiveness (EQ 5.2)
	'				ES = 1 - Exp(-UAS / (AMS * Cpos))
	'			End If

	'			'-------COMPUTE EVAPORATING AND CONDENSING TEMPERATURE---------
	'			' Evaporating temperature (source side)(C)
	'			TE = TSI(k) - QSGUESS / (ES * AMS * Cpos)
	'			' Condensing temperature (load side)(C)
	'			TC = TLI(k) + QLGUESS / (EL * VL(k) * 1.2 * 1.005)
	'			' Condensing Pressure (Pa)
	'			PC = PSAT(TC, refindex)
	'			' Evaporating Pressure (Pa)
	'			PE = PSAT(TE, refindex)
	'			Select Case comptype
	'				Case "SCROLL"
	'					PSUC = PE
	'					PDIS = PC

	'				Case "RECIPROCATING"
	'					PSUC = PE - DP1
	'					If (PSUC < 0) Then
	'						MIerrorflag = True
	'						Exit Sub
	'					End If
	'					PDIS = PC + DP2

	'				Case "ROTARY"
	'					PSUC = PE
	'					PDIS = PC + DP2
	'			End Select

	'			'-------IDENTIFY CONDENSER AND EVAPORATOR EXITS---------------------------
	'			' Evaporator outlet specific volume,V1 & condenser outlet specific volume,V31
	'			V1 = VGAS(PE, TE, 0.0001, refindex)
	'			V31 = VGAS(PC, TC, 0.0001, refindex)
	'			' Evaporator outlet enthalpy,H1 & condenser outlet enthapy,H3(KJ/kg)
	'			H1 = HGAS(PE, V1, TE, refindex)
	'			H3 = HGAS(PC, V31, TC, refindex) - DHLAT(PC, V31, TC, refindex)
	'			'-------COMPUTE REFRIGERANT MASS FLOW RATE FROM COMPRESSOR MODEL------
	'			' The superheated gas specific volume of the source side outlet,V10(m^3/Kg)
	'			T10 = TE + SH
	'			V10 = VGAS(PE, T10, 0.0001, refindex)
	'			' The enthalpy of the superheated fluid at source side outletKJ/Kg)
	'			H10 = HGAS(PE, V10, T10, refindex)
	'			' The compressor suction temperature and specific volume(m^3/Kg)
	'			T11 = TPH(PSUC, H10, 0.0001, refindex)
	'			V11 = VGAS(PSUC, T11, 0.0001, refindex)

	'			Select Case comptype
	'				Case "SCROLL"
	'					' The "Scroll" compressor refrigerant mass flow rate,AMR(Kg/s) (EQ 6.7 and EQ 6.8)
	'					AMR = VR / V11 - C * PDIS / PSUC
	'				Case "RECIPROCATING"
	'					'The "Reciprocating" Compressor refrigerant mass flow rate,AMR(Kg/s) (EQ 4.4)
	'					AMR = PD / V11 * (1 + C - C * (PDIS / PSUC) ^ (1 / ANN))
	'				Case "ROTARY"
	'					'The "Reciprocating" Compressor refrigerant mass flow rate,AMR(Kg/s) (EQ 6.20)
	'					AMR = VD / V11
	'			End Select

	'			' -------COMPUTE SOURCE SIDE HEAT TRANSFER RATE,QS(KW)-----------
	'			QS = AMR * (H1 - H3)
	'			If (Abs(QS - QSGUESS) / QSGUESS < 0.01) Then GoTo 70
	'			QSGUESS = QSGUESS + 0.25 * (QS - QSGUESS)
	'			GoTo 40
	'70:		 QS = AMR * (H1 - H3)
	'			'--------COMPUTE COMPRESSOR POWER CONSUMPTION,WT FROM MODEL------------
	'			Select Case comptype
	'				Case "SCROLL"
	'					' The theoritical "Scroll" compressor power input,WT(KW) (EQ 6.5)
	'					WT = ANN / (ANN - 1) * PSUC * VR * ((ANN - 1) / ANN * (PDIS / PSUC) / VI + 1 / ANN * VI ^ (ANN - 1) - 1)
	'				Case "RECIPROCATING"
	'					'The theoritical "Reciprocating" compressor power input,WT(KW) (EQ 4.6)
	'					WT = AMR * ANN / (ANN - 1) * PSUC * V11 * ((PDIS / PSUC) ^ ((ANN - 1) / ANN) - 1)
	'				Case "ROTARY"
	'					'The theoritical "Reciprocating" compressor power input,WT(KW) (EQ 6.21)
	'					WT = AMR * ANN / (ANN - 1) * PSUC * V11 * ((PDIS / PSUC) ^ ((ANN - 1) / ANN) - 1)
	'			End Select

	'			' The actual compressor power input,W(KW) (EQ 4.7)
	'			W = WLOSS + (1 / ETA) * WT
	'			'--------COMPUTE LOAD SIDE HEAT TRANSFER RATE,QL(KW)------------------
	'			QL = W + QS
	'			If (Abs(QL - QLGUESS) / QLGUESS < 0.01) Then
	'				GoTo 80
	'			Else
	'				QLGUESS = QLGUESS + 0.5 * (QL - QLGUESS)
	'				GoTo 30
	'			End If
	'80:		 Worksheets("RESULT").Cells(4 + k, 5 + 6 * (guessnum - 1)) = QL
	'			Worksheets("RESULT").Cells(4 + k, 6 + 6 * (guessnum - 1)) = QS
	'			Worksheets("RESULT").Cells(4 + k, 7 + 6 * (guessnum - 1)) = W
	'		Next k
	'	End Sub

	'	Private Function DegradF(ByVal CONCENT As Single, ByVal TEMP As Single, ByVal ISECC As Integer) As Single
	'		'Dim CONCENT As Single, TEMP As Single, ISECC As Single
	'		Dim AMUWATER As Single, RHOWATER As Single, CPWATER As Single, AKWATER As Single
	'		Dim AMUCOOLANT As Single, RHOCOOLANT As Single, CPCOOLANT As Single, AKCOOLANT As Single
	'		AMUWATER = WMU(TEMP)
	'		RHOWATER = WRHO(TEMP)
	'		CPWATER = WCP(TEMP) * 1000
	'		AKWATER = WK(TEMP) * 1000
	'		AMUCOOLANT = SECCVISC(CONCENT, TEMP, ISECC)
	'		RHOCOOLANT = SECCDENS(CONCENT, TEMP, ISECC)
	'		CPCOOLANT = SECCSPHT(CONCENT, TEMP, ISECC)
	'		AKCOOLANT = SECCCOND(CONCENT, TEMP, ISECC)
	'		DegradF = (AMUCOOLANT / AMUWATER) ^ (-0.47) * (RHOCOOLANT / RHOWATER) ^ 0.8 * (CPCOOLANT / CPWATER) ^ 0.33 * (AKCOOLANT / AKWATER) ^ 0.67
	'	End Function

End Class

Public Class HeatPump_WaterAir_Cooling_CurveFit
	Implements IComponentEngine

	Public Structure WAHPCoolingData

		Dim RatedAirVolFlowRate As Double		'rated air volumetric flow rate [m3/s]
		Dim RatedWaterVolFlowRate As Double		'rated water volumetric flow rate [m3/s]
		Dim RatedTotalCap As Double				'rated total heating capacity [W]
		Dim RatedPower As Double				'rated compressor power [W]
		Dim RatedSensibleCap As Double

		Dim CatalogDataArray(,) As Single

		Dim LoadSideInletDB As List(Of Double)
		Dim LoadSideInletWB As List(Of Double)
		Dim LoadSideVolFlowRate As List(Of Double)
		Dim SourceSideVolFlowRate As List(Of Double)
		Dim TotalCoolingCapacity As List(Of Double)
		Dim SensibleCoolingCapacity As List(Of Double)
		Dim LatentCoolingCapacity As List(Of Double)
		Dim SourceSideInletTemp As List(Of Double)
		Dim SourceSideHeatRate As List(Of Double)
		Dim CompressorPower As List(Of Double)
		Dim PredictedTotalCoolingCapacity As List(Of Double)
		Dim PredictedSensibleCoolingCapacity As List(Of Double)
		Dim PredictedPowerInput As List(Of Double)
		Dim PredictedSourceHeatRate As List(Of Double)

		Sub ReInitDataLists()
			LoadSideInletDB = New List(Of Double)
			LoadSideInletWB = New List(Of Double)
			LoadSideVolFlowRate = New List(Of Double)
			SourceSideVolFlowRate = New List(Of Double)
			TotalCoolingCapacity = New List(Of Double)
			SensibleCoolingCapacity = New List(Of Double)
			LatentCoolingCapacity = New List(Of Double)
			SourceSideInletTemp = New List(Of Double)
			SourceSideHeatRate = New List(Of Double)
			CompressorPower = New List(Of Double)
			PredictedTotalCoolingCapacity = New List(Of Double)
			PredictedSensibleCoolingCapacity = New List(Of Double)
			PredictedPowerInput = New List(Of Double)
			PredictedSourceHeatRate = New List(Of Double)
		End Sub

	End Structure
	Public WAHPCooling As New WAHPCoolingData

	Private _GenerateObjectOrParameterList As PublicData.ObjectOrParList
	Public Property GenerateObjectOrParameterList() As PublicData.ObjectOrParList Implements IComponentEngine.GenerateObjectOrParameterList
		Get
			Return _GenerateObjectOrParameterList
		End Get
		Set(ByVal value As PublicData.ObjectOrParList)
			_GenerateObjectOrParameterList = value
		End Set
	End Property

	Public ReadOnly Property EnergyPlusObjectFormat() As String Implements IComponentEngine.EnergyPlusObjectFormat
		Get
			Dim Format As New System.Text.StringBuilder
			Format.AppendLine("Coil:Cooling:WaterToAirHeatPump:EquationFit,")
			Format.AppendLine("{0},{1}!- field Name")
			Format.AppendLine("{2},{3}!- field Water Inlet Node Name")
			Format.AppendLine("{4},{5}!- field Water Outlet Node Name")
			Format.AppendLine("{6},{7}!- field Air Inlet Node Name")
			Format.AppendLine("{8},{9}!- field Air Outlet Node Name")
			Format.AppendLine("{10},{11}!- field Rated Air Flow Rate")
			Format.AppendLine("{12},{13}!- field Rated Water Flow Rate")
			Format.AppendLine("{14},{15}!- field Rated Total Cooling Capacity")
			Format.AppendLine("{16},{17}!- field Rated Sensible Cooling Capacity")
			Format.AppendLine("{18},{19}!- field Rated Cooling COP")
			Format.AppendLine("{20},{21}!- field Total Cooling Capacity Coefficient 1")
			Format.AppendLine("{22},{23}!- field Total Cooling Capacity Coefficient 2")
			Format.AppendLine("{24},{25}!- field Total Cooling Capacity Coefficient 3")
			Format.AppendLine("{26},{27}!- field Total Cooling Capacity Coefficient 4")
			Format.AppendLine("{28},{29}!- field Total Cooling Capacity Coefficient 5")
			Format.AppendLine("{30},{31}!- field Sensible Cooling Capacity Coefficient 1")
			Format.AppendLine("{32},{33}!- field Sensible Cooling Capacity Coefficient 2")
			Format.AppendLine("{34},{35}!- field Sensible Cooling Capacity Coefficient 3")
			Format.AppendLine("{36},{37}!- field Sensible Cooling Capacity Coefficient 4")
			Format.AppendLine("{38},{39}!- field Sensible Cooling Capacity Coefficient 5")
			Format.AppendLine("{40},{41}!- field Sensible Cooling Capacity Coefficient 6")
			Format.AppendLine("{42},{43}!- field Cooling Power Consumption Coefficient 1")
			Format.AppendLine("{44},{45}!- field Cooling Power Consumption Coefficient 2")
			Format.AppendLine("{46},{47}!- field Cooling Power Consumption Coefficient 3")
			Format.AppendLine("{48},{49}!- field Cooling Power Consumption Coefficient 4")
			Format.AppendLine("{50};{51}!- field Cooling Power Consumption Coefficient 5")
			Return Format.ToString
		End Get
	End Property

	Public Event PlotEvent(ByVal PlotData As PublicData.PlotData) Implements IComponentEngine.PlotEvent
	Public Event ProgressEvent_Complete(ByVal objectentry As String) Implements IComponentEngine.ProgressEvent_Complete
	Public Event ProgressEvent_Increment() Implements IComponentEngine.ProgressEvent_Increment
	Public Event ProgressEvent_Initialize(ByVal maxvalue As Integer) Implements IComponentEngine.ProgressEvent_Initialize

	Public Function GenerateComponentParameters() As PublicData.ComponentCalculationReturn Implements IComponentEngine.GenerateComponentParameters

		Dim NumDataPoints As Integer = WAHPCooling.CatalogDataArray.GetUpperBound(1) + 1	'Number of Data points
		Dim NumDataPoints_BZ As Integer = NumDataPoints - 1

		Dim Arr_NumCoefficients() As Integer = {5, 6, 5}
		Dim Arr_NumCoefficients_BZ() As Integer = Array.ConvertAll(Arr_NumCoefficients, Function(x) x - 1)

		RaiseEvent ProgressEvent_Initialize(17)

		Const CelciusToKelvin As Double = 273.15000000001
		Const Tref As Double = 283.15000000001				   'reference temperature = 10C
		Const InstanceCalcTotalCapacity As Integer = 1
		Const InstanceCalcSensibleCapacity As Integer = 2
		Const InstanceCalcPower As Integer = 3

		'create this list of booleans to mark data points as good or bad
		Dim ValueCheckedOK As New List(Of Boolean)
		Dim NumBadPointsFound As Integer = 0
		For I As Integer = 0 To NumDataPoints_BZ
			Dim DryBulb_ As Double = WAHPCooling.CatalogDataArray(0, I)
			Dim WetBulb_ As Double = WAHPCooling.CatalogDataArray(1, I)
			Dim Qtot_ As Double = WAHPCooling.CatalogDataArray(3, I)
			Dim Qsens_ As Double = WAHPCooling.CatalogDataArray(4, I)
			Dim VLI_ As Double = WAHPCooling.CatalogDataArray(2, I)

			'normally we will do this
			Dim ThisIsAGoodPoint As Boolean = CoilOutletRHIsValid(DryBulb_, WetBulb_, Qtot_, Qsens_, VLI_)
			'ValueCheckedOK.Add(ThisIsAGoodPoint)

			'but for now, let's just accept all points and warn that some were bad
			ValueCheckedOK.Add(True)

			If Not ThisIsAGoodPoint Then NumBadPointsFound += 1

		Next

		If NumBadPointsFound > 0 Then
			Dim s As New System.Text.StringBuilder()
			s.AppendLine("During the test for invalid data points, {0} point(s) were shown to be out of range.")
			s.AppendLine("This simply means that the combination of flow/heat transfer/temperatures resulted in")
			s.AppendLine(" odd coil outlet conditions.  The curve fit procedure continues, including these points")
			s.AppendLine(" in the overall data set.  Through testing, this has actually been shown to produce")
			s.AppendLine(" better curve fits when the full spectrum of data is included.")
			Call ShowWarningError(String.Format(s.ToString, NumBadPointsFound))
		End If

		WAHPCooling.ReInitDataLists()

		'=============READING INPUT DATA========================

		'Read in the catalog data input, use the boolean OK array to determine whether to actually add this point
		'*1000=Change kW to W
		For I As Integer = 0 To NumDataPoints_BZ
			If Not ValueCheckedOK(I) Then Continue For 'loop if it was a bad point
			WAHPCooling.LoadSideInletDB.Add(WAHPCooling.CatalogDataArray(0, I))
			WAHPCooling.LoadSideInletWB.Add(WAHPCooling.CatalogDataArray(1, I))
			WAHPCooling.LoadSideVolFlowRate.Add(WAHPCooling.CatalogDataArray(2, I))
			Dim TempTotalCooling As Double = WAHPCooling.CatalogDataArray(3, I) * 1000
			WAHPCooling.TotalCoolingCapacity.Add(WAHPCooling.CatalogDataArray(3, I) * 1000)
			Dim TempSensCooling As Double = WAHPCooling.CatalogDataArray(4, I) * 1000
			WAHPCooling.SensibleCoolingCapacity.Add(WAHPCooling.CatalogDataArray(4, I) * 1000)
			WAHPCooling.LatentCoolingCapacity.Add(TempTotalCooling - TempSensCooling)
			WAHPCooling.SourceSideInletTemp.Add(WAHPCooling.CatalogDataArray(5, I))
			WAHPCooling.SourceSideVolFlowRate.Add(WAHPCooling.CatalogDataArray(6, I))
			WAHPCooling.SourceSideHeatRate.Add(WAHPCooling.CatalogDataArray(7, I) * 1000)
			WAHPCooling.CompressorPower.Add(WAHPCooling.CatalogDataArray(8, I) * 1000)
		Next I
		RaiseEvent ProgressEvent_Increment()

		'for all further calculations, the removed data is gone, so we will only take the number of valid data points
		NumDataPoints_BZ = WAHPCooling.LoadSideInletDB.Count - 1
		NumDataPoints = NumDataPoints_BZ + 1

		If NumDataPoints = 0 Then
			Dim s As New System.Text.StringBuilder()
			s.AppendLine("The data set is empty.  This is likely due to invalid data being entered.")
			s.AppendLine()
			s.AppendLine("For air-cooling components such as water-to-air heat pump cooling, a set")
			s.AppendLine(" of calculations are performed to ensure reasonable humidity values are obtained")
			s.AppendLine(" for the coil.  Any invalid points are removed.  It is possible that all points")
			s.AppendLine(" were calculated as invalid and removed.")
			s.AppendLine()
			s.AppendLine("As a check, take a single data point and calculate outlet dry bulb temperature with:")
			s.AppendLine()
			s.AppendLine("   T_outlet = T_inlet - Q_sensible / (Air Density * Air Flow Rate * Air Specific Heat)")
			Return New PublicData.ComponentCalculationReturn(False, s.ToString)
		End If

		Dim C1 As MatrixLibrary.Matrix = Nothing
		Dim C2 As MatrixLibrary.Matrix = Nothing
		Dim C3 As MatrixLibrary.Matrix = Nothing

		For InstanceNum As Integer = InstanceCalcTotalCapacity To InstanceCalcPower

			Dim NumCoefficients As Integer = Arr_NumCoefficients(InstanceNum - 1)
			Dim NumCoefficients_BZ As Integer = NumCoefficients - 1

			'Redimension all arrays to the required size determined by number of coefficients and number of data points.
			Dim F As New MatrixLibrary.Matrix(NumDataPoints, NumCoefficients)
			Dim Y As New MatrixLibrary.Matrix(NumDataPoints, 1)
			RaiseEvent ProgressEvent_Increment()

			'Fill in the F matrix
			For I As Integer = 0 To NumDataPoints_BZ
				Select Case InstanceNum
					Case InstanceCalcTotalCapacity, InstanceCalcPower
						F(I, 0) = 1
						F(I, 1) = ((WAHPCooling.LoadSideInletWB(I) + CelciusToKelvin) / Tref)
						F(I, 2) = ((WAHPCooling.SourceSideInletTemp(I) + CelciusToKelvin) / Tref)
						F(I, 3) = (WAHPCooling.LoadSideVolFlowRate(I) / WAHPCooling.RatedAirVolFlowRate)
						F(I, 4) = (WAHPCooling.SourceSideVolFlowRate(I) / WAHPCooling.RatedWaterVolFlowRate)
					Case InstanceCalcSensibleCapacity
						F(I, 0) = 1
						F(I, 1) = ((WAHPCooling.LoadSideInletDB(I) + CelciusToKelvin) / Tref)
						F(I, 2) = ((WAHPCooling.LoadSideInletWB(I) + CelciusToKelvin) / Tref)
						F(I, 3) = ((WAHPCooling.SourceSideInletTemp(I) + CelciusToKelvin) / Tref)
						F(I, 4) = (WAHPCooling.LoadSideVolFlowRate(I) / WAHPCooling.RatedAirVolFlowRate)
						F(I, 5) = (WAHPCooling.SourceSideVolFlowRate(I) / WAHPCooling.RatedWaterVolFlowRate)
				End Select
			Next I
			RaiseEvent ProgressEvent_Increment()

			For I As Integer = 0 To NumDataPoints_BZ
				Select Case InstanceNum
					Case InstanceCalcTotalCapacity
						Y(I, 0) = WAHPCooling.TotalCoolingCapacity(I) / WAHPCooling.RatedTotalCap
					Case InstanceCalcSensibleCapacity
						Y(I, 0) = WAHPCooling.SensibleCoolingCapacity(I) / WAHPCooling.RatedSensibleCap
					Case InstanceCalcPower
						Y(I, 0) = WAHPCooling.CompressorPower(I) / WAHPCooling.RatedPower
				End Select
			Next I
			RaiseEvent ProgressEvent_Increment()

			Try
				Select Case InstanceNum
					Case InstanceCalcTotalCapacity
						C1 = MatrixLibrary.Matrix.SolveEqSet(F, Y)
					Case InstanceCalcSensibleCapacity
						C2 = MatrixLibrary.Matrix.SolveEqSet(F, Y)
					Case InstanceCalcPower
						C3 = MatrixLibrary.Matrix.SolveEqSet(F, Y)
				End Select
			Catch ex As Exception
				Return New PublicData.ComponentCalculationReturn(False, "Matrix inverse routine error, could be bad input data")
			End Try
			RaiseEvent ProgressEvent_Increment()

			'Generate Outputs
			For I As Integer = 0 To NumDataPoints_BZ
				Select Case InstanceNum

					Case InstanceCalcTotalCapacity
						WAHPCooling.PredictedTotalCoolingCapacity.Add(WAHPCooling.RatedTotalCap * _
						(C1(0, 0) * F(I, 0) + _
						 C1(1, 0) * F(I, 1) + _
						 C1(2, 0) * F(I, 2) + _
						 C1(3, 0) * F(I, 3) + _
						 C1(4, 0) * F(I, 4)))

					Case InstanceCalcSensibleCapacity
						WAHPCooling.PredictedSensibleCoolingCapacity.Add(WAHPCooling.RatedSensibleCap * _
						(C2(0, 0) * F(I, 0) + _
						 C2(1, 0) * F(I, 1) + _
						 C2(2, 0) * F(I, 2) + _
						 C2(3, 0) * F(I, 3) + _
						 C2(4, 0) * F(I, 4) + _
						 C2(5, 0) * F(I, 5)))
						If (WAHPCooling.PredictedSensibleCoolingCapacity(I) > WAHPCooling.PredictedTotalCoolingCapacity(I)) Then _
						WAHPCooling.PredictedSensibleCoolingCapacity(I) = WAHPCooling.PredictedTotalCoolingCapacity(I)

					Case InstanceCalcPower
						WAHPCooling.PredictedPowerInput.Add(WAHPCooling.RatedPower * _
						(C3(0, 0) * F(I, 0) + _
						  C3(1, 0) * F(I, 1) + _
						  C3(2, 0) * F(I, 2) + _
						  C3(3, 0) * F(I, 3) + _
						  C3(4, 0) * F(I, 4)))
						WAHPCooling.PredictedSourceHeatRate.Add(WAHPCooling.PredictedTotalCoolingCapacity(I) + WAHPCooling.PredictedPowerInput(I))

				End Select
			Next I
			RaiseEvent ProgressEvent_Increment()

		Next InstanceNum
		RaiseEvent ProgressEvent_Increment()

		'Print the coefficients to the worksheet.
		Dim TextOutput As String = ""
		Dim QuickText As String = ""
		Select Case Me.GenerateObjectOrParameterList
			Case ObjectOrParList.EnergyPlusObject
				Dim FieldValues As New List(Of String)
				FieldValues.Add("Your Cooling Coil Name")
				FieldValues.Add("Your Coil Water Inlet Node")
				FieldValues.Add("Your Coil Water Outlet Node")
				FieldValues.Add("Your Coil Air Inlet Node")
				FieldValues.Add( "Your Coil Air Outlet Node")
				FieldValues.Add(WAHPCooling.RatedAirVolFlowRate.ToString)
				FieldValues.Add(WAHPCooling.RatedWaterVolFlowRate.ToString)
				FieldValues.Add(WAHPCooling.RatedTotalCap.ToString)
				FieldValues.Add(WAHPCooling.RatedSensibleCap.ToString)
				FieldValues.Add(Math.Round((WAHPCooling.RatedTotalCap / WAHPCooling.RatedPower), DecPts).ToString) 'Rated COP
				For J As Integer = 0 To Arr_NumCoefficients_BZ(0)
					FieldValues.Add(Math.Round(C1(J, 0), DecPts).ToString)
				Next
				For J As Integer = 0 To Arr_NumCoefficients_BZ(1)
					FieldValues.Add(Math.Round(C2(J, 0), DecPts).ToString)
				Next
				For J As Integer = 0 To Arr_NumCoefficients_BZ(2)
					FieldValues.Add(Math.Round(C3(J, 0), DecPts).ToString)
				Next
				TextOutput = EPlusObject(FieldValues.ToArray, Me.EnergyPlusObjectFormat)
			Case ObjectOrParList.ParameterList
				Dim TextBuilder As New System.Text.StringBuilder
				TextBuilder.AppendLine("**Begin Nomenclature**")
				TextBuilder.AppendLine("CC: Cooling Capacity")
				TextBuilder.AppendLine("SC: Sensible Cooling Capacity")
				TextBuilder.AppendLine("CP: Cooling Power Consumption")
				TextBuilder.AppendLine("TDB: Entering Air Dry Bulb Temperature")
				TextBuilder.AppendLine("TWB: Entering Air Wet Bulb Temperature")
				TextBuilder.AppendLine("TSI: Entering Water Temperature")
				TextBuilder.AppendLine("VLI: Entering Air Flow Rate")
				TextBuilder.AppendLine("VSI: Entering Water Flow Rate")
				TextBuilder.AppendLine("Subscript _R: Rated Value")
				TextBuilder.AppendLine("Subscript _#: Coefficient #")
				TextBuilder.AppendLine("**End Nomenclature**")
				TextBuilder.AppendLine()
				TextBuilder.AppendLine("**Begin Governing Equations**")
				TextBuilder.AppendLine("(CC/CC_R) = CC_1 + CC_2*(TWB/TWB_R) + CC_3*(TSI/TSI_R) + CC_4*(VLI/VLI_R) + CC_5*(VSI/VSI_R)")
				TextBuilder.AppendLine("(SC/SC_R) = SC_1 + SC_2*(TDB/TDB_R) + SC_3*(TWB/TWB_R) + SC_4*(TSI/TSI_R) + SC_5*(VLI/VLI_R) + SC_6*(VSI/VSI_R)")
				TextBuilder.AppendLine("(CP/CP_R) = CP_1 + CP_2*(TWB/TWB_R) + CP_3*(TSI/TSI_R) + CP_4*(VLI/VLI_R) + CP_5*(VSI/VSI_R)")
				TextBuilder.AppendLine("**End Governing Equations**")
				TextBuilder.AppendLine()
				TextBuilder.AppendLine("**Begin Reporting Parameters**")
				For J As Integer = 0 To Arr_NumCoefficients_BZ(0)
					TextBuilder.AppendLine("Total Cooling Capacity Coefficient CC_" & (J + 1).ToString & ": " & Math.Round(C1(J, 0), DecPts).ToString)
				Next
				For J As Integer = 0 To Arr_NumCoefficients_BZ(1)
					TextBuilder.AppendLine("Sensible Cooling Capacity Coefficient SC_" & (J + 1).ToString & ": " & Math.Round(C2(J, 0), DecPts).ToString)
				Next
				For J As Integer = 0 To Arr_NumCoefficients_BZ(2)
					TextBuilder.AppendLine("Cooling Power Consumption Coefficient CP_" & (J + 1).ToString & ": " & Math.Round(C3(J, 0), DecPts).ToString)
				Next
				TextBuilder.AppendLine("Rated Total Cooling Capacity: " & WAHPCooling.RatedTotalCap.ToString & "{kW}")
				TextBuilder.AppendLine("Rated Sensible Cooling Capacity: " & WAHPCooling.RatedSensibleCap.ToString & "{kW}")
				TextBuilder.AppendLine("Rated Cooling Power Consumption: " & WAHPCooling.RatedPower.ToString & "{kW}")
				TextBuilder.AppendLine("Rated Air Volumetric Flow Rate: " & WAHPCooling.RatedAirVolFlowRate.ToString & "{m3/s}")
				TextBuilder.AppendLine("Rated Water Volumetric Flow Rate: " & WAHPCooling.RatedWaterVolFlowRate.ToString & "{m3/s}")
				TextBuilder.AppendLine("**End Reporting Parameters**")
				TextOutput = TextBuilder.ToString
		End Select
		RaiseEvent ProgressEvent_Increment()
		RaiseEvent ProgressEvent_Complete(TextOutput)
		
		GenerateComponentParameters.Success = True
		GenerateComponentParameters.ErrorMessage = ""

	End Function

	Public Sub GeneratePlot_Absolute() Implements IComponentEngine.GeneratePlot_Absolute

		Dim PlotSeries As New Collections.Generic.List(Of PublicData.PlotSeriesData)
		PlotSeries.Add(New PublicData.PlotSeriesData("Total HT Model Output", PlotTypeEnum.LinePlot, Color.Red, WAHPCooling.PredictedTotalCoolingCapacity.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Total HT Catalog Data", PlotTypeEnum.PointPlot, Color.Red, WAHPCooling.TotalCoolingCapacity.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Sensible HT Model Output", PlotTypeEnum.LinePlot, Color.DarkGray, WAHPCooling.PredictedSensibleCoolingCapacity.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Sensible HT Catalog Data", PlotTypeEnum.PointPlot, Color.DarkGray, WAHPCooling.SensibleCoolingCapacity.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT Model Output", PlotTypeEnum.LinePlot, Color.GreenYellow, WAHPCooling.PredictedSourceHeatRate.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT Catalog Data", PlotTypeEnum.PointPlot, Color.GreenYellow, WAHPCooling.SourceSideHeatRate.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Power Model Output", PlotTypeEnum.LinePlot, Color.DarkGreen, WAHPCooling.PredictedPowerInput.ToArray))
		PlotSeries.Add(New PublicData.PlotSeriesData("Power Catalog Data", PlotTypeEnum.PointPlot, Color.DarkGreen, WAHPCooling.CompressorPower.ToArray))

		Dim MyPlotData As New PublicData.PlotData("Model vs. Catalog Data Points", "Heat Transfer Rate", PlotSeries)
		'Dim SW As New IO.StreamWriter("c:\temp\debuggingAbs.csv")
		'Dim Upperbound As Integer = WAHPCooling.PredictedPowerInput.GetUpperBound(0)
		'For I As Integer = 0 To UpperBound
		'	For Each Series As PublicData.PlotSeriesData In PlotSeries
		'		SW.Write(Series.YValues(I) & ",")
		'	Next
		'	SW.WriteLine()
		'Next
		'SW.Close()
		RaiseEvent PlotEvent(MyPlotData)

	End Sub

	Public Sub GeneratePlot_PercentError() Implements IComponentEngine.GeneratePlot_PercentError
		Dim UpperBound As Integer = WAHPCooling.PredictedTotalCoolingCapacity.Count - 1

		Dim PercDiffTotal(UpperBound) As Double
		Dim PercDiffSource(UpperBound) As Double
		Dim PercDiffPower(UpperBound) As Double
		Dim PercDiffSensible(UpperBound) As Double

		For I As Integer = 1 To UpperBound
			PercDiffTotal(I) = 100 * (WAHPCooling.PredictedTotalCoolingCapacity(I) - WAHPCooling.TotalCoolingCapacity(I)) / WAHPCooling.TotalCoolingCapacity(I)
			PercDiffSource(I) = 100 * (WAHPCooling.PredictedSourceHeatRate(I) - WAHPCooling.SourceSideHeatRate(I)) / WAHPCooling.SourceSideHeatRate(I)
			PercDiffPower(I) = 100 * (WAHPCooling.PredictedPowerInput(I) - WAHPCooling.CompressorPower(I)) / WAHPCooling.CompressorPower(I)
			PercDiffSensible(I) = 100 * (WAHPCooling.PredictedSensibleCoolingCapacity(I) - WAHPCooling.SensibleCoolingCapacity(I)) / WAHPCooling.SensibleCoolingCapacity(I)
		Next

		Dim PlotSeries As New Generic.List(Of PublicData.PlotSeriesData)
		PlotSeries.Add(New PublicData.PlotSeriesData("Load HT % Error", PlotTypeEnum.LinePlot, Color.Red, PercDiffTotal))
		PlotSeries.Add(New PublicData.PlotSeriesData("Sensible HT % Error", PlotTypeEnum.LinePlot, Color.DarkGray, PercDiffSensible))
		PlotSeries.Add(New PublicData.PlotSeriesData("Source HT % Error", PlotTypeEnum.LinePlot, Color.GreenYellow, PercDiffSource))
		PlotSeries.Add(New PublicData.PlotSeriesData("Comp. Power % Error", PlotTypeEnum.LinePlot, Color.DarkGreen, PercDiffPower))
		
		Dim MyPlotData As New PublicData.PlotData("% Error", "Heat Transfer Rate/Power", PlotSeries)
		'Dim SW As New IO.StreamWriter("c:\temp\debugging.csv")
		'For I As Integer = 0 To UpperBound
		'	For Each Series As PublicData.PlotSeriesData In PlotSeries
		'		SW.Write(Series.YValues(I) & ",")
		'	Next
		'	SW.WriteLine()
		'Next
		'SW.Close()
		RaiseEvent PlotEvent(MyPlotData)

	End Sub

	Public Function CoilOutletRHIsValid(ByVal DB As Double, ByVal WB As Double, ByVal Qtot As Double, ByVal Qsens As Double, ByVal LoadVdot As Double) As Boolean
		Dim RH As Double = WaterAirCoilOutletRH(DB, WB, Qtot, Qsens, LoadVdot)
		If RH >= 0.0 AndAlso RH <= 1.0 Then
			Return True
		Else
			Return False
		End If
	End Function

	''' <summary>
	''' Calculate the relative humidity of the air exiting the cooling coil
	''' </summary>
	''' <param name="TDBinlet">air inlet dry bulb temperature (C)</param>
	''' <param name="TWBinlet">air inlet wet bulb temperature (C)</param>
	''' <param name="QLWET">total cooling capacity(KW)</param>
	''' <param name="QLSEN">sensible cooling(KW)</param>
	''' <param name="VLI">volumetric air flow rate (m^3/s)</param>
	''' <returns>relative humidity of the air exiting cooling coil</returns>
	''' <remarks></remarks>
	Public Function WaterAirCoilOutletRH(ByVal TDBinlet As Single, ByVal TWBinlet As Single, ByVal QLWET As Single, ByVal QLSEN As Single, ByVal VLI As Single) As Double

		'local variables
		Dim TDBexit As Single 'TDBexit = air inlet dry bulb temperature (C)
		Dim Hinlet As Single 'Hinlet = air inlet enthalpy (KJ/kg)
		Dim Hexit As Single	'Hexit = air exit enthalpy (KJ/kg)
		Dim Wexit As Single	'Wexit = humidity ratio of the air exit
		Dim Pws As Single 'Pws = water vapor saturation pressure at dry bulb temperature (Pa)
		Dim ALNPws As Single
		Dim WSexit As Single 'WSexit = saturation humidity ratio at dry bulb temperature

		'parameters
		Const Patm As Single = 101325 'atmospheric pressure (Pa)
		Const airdensity As Single = 1.2 '(kg/m^3)
		Const CPair As Single = 1.006 'KJ/kg

		'calculations
		Hinlet = H(TDBinlet, TWBinlet)
		TDBexit = TDBinlet - QLSEN / (VLI * airdensity * CPair)
		Hexit = Hinlet - QLWET / (VLI * airdensity)
		Wexit = (Hexit - 1.006 * TDBexit) / (2501 + 1.805 * TDBexit)
		ALNPws = -5800.2206 / (TDBexit + 273.15) + 1.3914993 - 0.048640239 * (TDBexit + 273.15) _
		   + 0.000041764768 * (TDBexit + 273.15) ^ 2 - 0.000000014452093 * (TDBexit + 273.15) ^ 3 _
		   + 6.5459673 * Math.Log(TDBexit + 273.15)
		Pws = Math.Exp(ALNPws)
		WSexit = 0.62198 * Pws / (Patm - Pws)

		WaterAirCoilOutletRH = (Wexit / WSexit) / (1 - (1 - (Wexit / WSexit)) * (Pws / Patm))

	End Function

End Class

